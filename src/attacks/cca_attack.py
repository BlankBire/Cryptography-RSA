from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

def cca_oracle(ciphertext, private_key):
    """
    Oracle cho attacker bi·∫øt ciphertext c√≥ h·ª£p l·ªá hay kh√¥ng khi gi·∫£i m√£.
    ƒê√¢y l√† c∆° s·ªü cho CCA (Chosen Ciphertext Attack).
    """
    cipher = PKCS1_OAEP.new(private_key)
    try:
        plaintext = cipher.decrypt(ciphertext)
        return True  # gi·∫£i m√£ th√†nh c√¥ng (ciphertext h·ª£p l·ªá)
    except ValueError:
        return False  # l·ªói gi·∫£i m√£ (ciphertext kh√¥ng h·ª£p l·ªá)

def simulate_cca_attack(ciphertext, private_key, public_key):
    """
    M√¥ ph·ªèng m·ªôt cu·ªôc t·∫•n c√¥ng CCA c∆° b·∫£n: attacker thay ƒë·ªïi ciphertext
    v√† d√πng oracle ƒë·ªÉ thu th·∫≠p th√¥ng tin t·ª´ ph·∫£n h·ªìi.
    """
    print("[üì°] Simulating Chosen Ciphertext Attack (CCA)...")

    # ƒê·ªïi t·ª´ng bit m·ªôt c·ªßa ciphertext v√† h·ªèi oracle
    valid_count = 0
    for i in range(len(ciphertext)):
        for bit in range(8):
            modified = bytearray(ciphertext)
            modified[i] ^= (1 << bit)
            if cca_oracle(bytes(modified), private_key):
                valid_count += 1

    print(f"[üîç] Valid modified ciphertexts: {valid_count}")
    return valid_count
